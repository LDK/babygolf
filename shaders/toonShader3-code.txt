var nodeMaterial = new BABYLON.NodeMaterial("node");
nodeMaterial.mode = BABYLON.NodeMaterialModes.Material;

// InputBlock
var position = new BABYLON.InputBlock("position");
position.visibleInInspector = false;
position.visibleOnFrame = false;
position.target = 1;
position.setAsAttribute("position");

// TransformBlock
var WorldPos = new BABYLON.TransformBlock("WorldPos");
WorldPos.visibleInInspector = false;
WorldPos.visibleOnFrame = false;
WorldPos.target = 1;
WorldPos.complementZ = 0;
WorldPos.complementW = 1;

// InputBlock
var World = new BABYLON.InputBlock("World");
World.visibleInInspector = false;
World.visibleOnFrame = false;
World.target = 1;
World.setAsSystemValue(BABYLON.NodeMaterialSystemValues.World);

// TransformBlock
var WorldnormalN = new BABYLON.TransformBlock("World normal (N)");
WorldnormalN.visibleInInspector = false;
WorldnormalN.visibleOnFrame = false;
WorldnormalN.target = 1;
WorldnormalN.complementZ = 0;
WorldnormalN.complementW = 0;

// InputBlock
var normal = new BABYLON.InputBlock("normal");
normal.visibleInInspector = false;
normal.visibleOnFrame = false;
normal.target = 1;
normal.setAsAttribute("normal");

// VectorSplitterBlock
var N = new BABYLON.VectorSplitterBlock("N");
N.visibleInInspector = false;
N.visibleOnFrame = false;
N.target = 4;

// NormalizeBlock
var NNormalized = new BABYLON.NormalizeBlock("N (Normalized)");
NNormalized.visibleInInspector = false;
NNormalized.visibleOnFrame = false;
NNormalized.target = 4;

// DotBlock
var NDotV = new BABYLON.DotBlock("N Dot V");
NDotV.visibleInInspector = false;
NDotV.visibleOnFrame = false;
NDotV.target = 4;

// NormalizeBlock
var VNormalized = new BABYLON.NormalizeBlock("V (Normalized)");
VNormalized.visibleInInspector = false;
VNormalized.visibleOnFrame = false;
VNormalized.target = 4;

// ViewDirectionBlock
var Viewdirection = new BABYLON.ViewDirectionBlock("View direction");
Viewdirection.visibleInInspector = false;
Viewdirection.visibleOnFrame = false;
Viewdirection.target = 4;

// InputBlock
var cameraPosition = new BABYLON.InputBlock("cameraPosition");
cameraPosition.visibleInInspector = false;
cameraPosition.visibleOnFrame = false;
cameraPosition.target = 1;
cameraPosition.setAsSystemValue(BABYLON.NodeMaterialSystemValues.CameraPosition);

// AddBlock
var H = new BABYLON.AddBlock("H  ");
H.visibleInInspector = false;
H.visibleOnFrame = false;
H.target = 4;

// NormalizeBlock
var LNormalized = new BABYLON.NormalizeBlock("L (Normalized)");
LNormalized.visibleInInspector = false;
LNormalized.visibleOnFrame = false;
LNormalized.target = 4;

// LightInformationBlock
var LightinformationL = new BABYLON.LightInformationBlock("Light information (L)");
LightinformationL.visibleInInspector = false;
LightinformationL.visibleOnFrame = false;
LightinformationL.target = 1;

// DotBlock
var NDotL = new BABYLON.DotBlock("N Dot L");
NDotL.visibleInInspector = false;
NDotL.visibleOnFrame = false;
NDotL.target = 4;

// PowBlock
var RimFactor = new BABYLON.PowBlock("Rim Factor");
RimFactor.visibleInInspector = false;
RimFactor.visibleOnFrame = false;
RimFactor.target = 4;

// InputBlock
var RimIntensity = new BABYLON.InputBlock("Rim Intensity");
RimIntensity.visibleInInspector = false;
RimIntensity.visibleOnFrame = false;
RimIntensity.target = 1;
RimIntensity.value = 3.8062;
RimIntensity.min = 0.01;
RimIntensity.max = 10;
RimIntensity.isBoolean = false;
RimIntensity.matrixMode = 0;
RimIntensity.animationType = BABYLON.AnimatedInputBlockTypes.None;
RimIntensity.isConstant = false;

// MultiplyBlock
var RimIntensityFactored = new BABYLON.MultiplyBlock("Rim Intensity (Factored)");
RimIntensityFactored.visibleInInspector = false;
RimIntensityFactored.visibleOnFrame = false;
RimIntensityFactored.target = 4;

// OneMinusBlock
var OneminusNDotV = new BABYLON.OneMinusBlock("One minus N Dot V");
OneminusNDotV.visibleInInspector = false;
OneminusNDotV.visibleOnFrame = false;
OneminusNDotV.target = 4;

// StepBlock
var QuantizedRimLightIntensity = new BABYLON.StepBlock("Quantized Rim Light Intensity");
QuantizedRimLightIntensity.visibleInInspector = false;
QuantizedRimLightIntensity.visibleOnFrame = false;
QuantizedRimLightIntensity.target = 4;

// InputBlock
var RimCutoff = new BABYLON.InputBlock("Rim Cutoff");
RimCutoff.visibleInInspector = false;
RimCutoff.visibleOnFrame = false;
RimCutoff.target = 1;
RimCutoff.value = 0.27;
RimCutoff.min = 0;
RimCutoff.max = 1;
RimCutoff.isBoolean = false;
RimCutoff.matrixMode = 0;
RimCutoff.animationType = BABYLON.AnimatedInputBlockTypes.None;
RimCutoff.isConstant = false;

// ScaleBlock
var Scale = new BABYLON.ScaleBlock("Scale");
Scale.visibleInInspector = false;
Scale.visibleOnFrame = false;
Scale.target = 4;

// InputBlock
var RimColor = new BABYLON.InputBlock("Rim Color");
RimColor.visibleInInspector = false;
RimColor.visibleOnFrame = false;
RimColor.target = 1;
RimColor.value = new BABYLON.Color3(1, 1, 1);
RimColor.isConstant = false;

// AddBlock
var AddRimSpecDiffAmb = new BABYLON.AddBlock("Add Rim + Spec + Diff + Amb");
AddRimSpecDiffAmb.visibleInInspector = false;
AddRimSpecDiffAmb.visibleOnFrame = false;
AddRimSpecDiffAmb.target = 4;

// AddBlock
var AddSpecularAmbientDiffuse = new BABYLON.AddBlock("Add Specular + Ambient + Diffuse");
AddSpecularAmbientDiffuse.visibleInInspector = false;
AddSpecularAmbientDiffuse.visibleOnFrame = false;
AddSpecularAmbientDiffuse.target = 4;

// ScaleBlock
var SpecularLightingCalculation = new BABYLON.ScaleBlock("Specular Lighting Calculation");
SpecularLightingCalculation.visibleInInspector = false;
SpecularLightingCalculation.visibleOnFrame = false;
SpecularLightingCalculation.target = 4;

// InputBlock
var SpecularColor = new BABYLON.InputBlock("Specular Color");
SpecularColor.visibleInInspector = false;
SpecularColor.visibleOnFrame = false;
SpecularColor.target = 1;
SpecularColor.value = new BABYLON.Color3(0.21568627450980393, 0.21568627450980393, 0.21568627450980393);
SpecularColor.isConstant = false;

// StepBlock
var QuantizedSpecularIntensity = new BABYLON.StepBlock("Quantized Specular Intensity");
QuantizedSpecularIntensity.visibleInInspector = false;
QuantizedSpecularIntensity.visibleOnFrame = false;
QuantizedSpecularIntensity.target = 4;

// PowBlock
var SpecularIntensity = new BABYLON.PowBlock("Specular Intensity ");
SpecularIntensity.visibleInInspector = false;
SpecularIntensity.visibleOnFrame = false;
SpecularIntensity.target = 4;

// MultiplyBlock
var SpecularFactor = new BABYLON.MultiplyBlock("Specular Factor ");
SpecularFactor.visibleInInspector = false;
SpecularFactor.visibleOnFrame = false;
SpecularFactor.target = 4;

// StepBlock
var QuantizedDiffuseLightingIntensity = new BABYLON.StepBlock("Quantized Diffuse Lighting Intensity");
QuantizedDiffuseLightingIntensity.visibleInInspector = false;
QuantizedDiffuseLightingIntensity.visibleOnFrame = false;
QuantizedDiffuseLightingIntensity.target = 4;

// InputBlock
var Diffusecutoff = new BABYLON.InputBlock("Diffuse cutoff ");
Diffusecutoff.visibleInInspector = false;
Diffusecutoff.visibleOnFrame = false;
Diffusecutoff.target = 1;
Diffusecutoff.value = 0.52;
Diffusecutoff.min = 0;
Diffusecutoff.max = 1;
Diffusecutoff.isBoolean = false;
Diffusecutoff.matrixMode = 0;
Diffusecutoff.animationType = BABYLON.AnimatedInputBlockTypes.None;
Diffusecutoff.isConstant = false;

// ScaleBlock
var DiffuseLightingCalculation = new BABYLON.ScaleBlock("Diffuse Lighting Calculation");
DiffuseLightingCalculation.visibleInInspector = false;
DiffuseLightingCalculation.visibleOnFrame = false;
DiffuseLightingCalculation.target = 4;

// InputBlock
var DiffuseColor = new BABYLON.InputBlock("Diffuse Color");
DiffuseColor.visibleInInspector = false;
DiffuseColor.visibleOnFrame = false;
DiffuseColor.target = 1;
DiffuseColor.value = new BABYLON.Color3(0.6588235294117647, 0.6588235294117647, 0.6588235294117647);
DiffuseColor.isConstant = false;

// AddBlock
var AddAmbienttoDiffusion = new BABYLON.AddBlock("Add Ambient to Diffusion");
AddAmbienttoDiffusion.visibleInInspector = false;
AddAmbienttoDiffusion.visibleOnFrame = false;
AddAmbienttoDiffusion.target = 4;

// InputBlock
var AmbientLight = new BABYLON.InputBlock("Ambient Light");
AmbientLight.visibleInInspector = false;
AmbientLight.visibleOnFrame = false;
AmbientLight.target = 1;
AmbientLight.value = new BABYLON.Color3(0.23137254901960785, 0.23137254901960785, 0.23137254901960785);
AmbientLight.isConstant = false;

// DotBlock
var NDotH = new BABYLON.DotBlock("N Dot H");
NDotH.visibleInInspector = false;
NDotH.visibleOnFrame = false;
NDotH.target = 4;

// NormalizeBlock
var HNormalized = new BABYLON.NormalizeBlock("H (Normalized)");
HNormalized.visibleInInspector = false;
HNormalized.visibleOnFrame = false;
HNormalized.target = 4;

// MultiplyBlock
var Glossiness = new BABYLON.MultiplyBlock("Glossiness ^2");
Glossiness.visibleInInspector = false;
Glossiness.visibleOnFrame = false;
Glossiness.target = 4;

// InputBlock
var Glossiness1 = new BABYLON.InputBlock("Glossiness");
Glossiness1.visibleInInspector = false;
Glossiness1.visibleOnFrame = false;
Glossiness1.target = 1;
Glossiness1.value = 3.8;
Glossiness1.min = 0;
Glossiness1.max = 5;
Glossiness1.isBoolean = false;
Glossiness1.matrixMode = 0;
Glossiness1.animationType = BABYLON.AnimatedInputBlockTypes.None;
Glossiness1.isConstant = false;

// InputBlock
var SpecularCutoff = new BABYLON.InputBlock("Specular Cutoff");
SpecularCutoff.visibleInInspector = false;
SpecularCutoff.visibleOnFrame = false;
SpecularCutoff.target = 1;
SpecularCutoff.value = 0.7822;
SpecularCutoff.min = 0.01;
SpecularCutoff.max = 1;
SpecularCutoff.isBoolean = false;
SpecularCutoff.matrixMode = 0;
SpecularCutoff.animationType = BABYLON.AnimatedInputBlockTypes.None;
SpecularCutoff.isConstant = false;

// ColorMergerBlock
var ColorMerger = new BABYLON.ColorMergerBlock("ColorMerger");
ColorMerger.visibleInInspector = false;
ColorMerger.visibleOnFrame = false;
ColorMerger.target = 4;
ColorMerger.rSwizzle = "r";
ColorMerger.gSwizzle = "g";
ColorMerger.bSwizzle = "b";
ColorMerger.aSwizzle = "a";

// MultiplyBlock
var LightxSurface = new BABYLON.MultiplyBlock("Light x Surface");
LightxSurface.visibleInInspector = false;
LightxSurface.visibleOnFrame = false;
LightxSurface.target = 4;

// InputBlock
var SurfaceColor = new BABYLON.InputBlock("Surface Color");
SurfaceColor.visibleInInspector = false;
SurfaceColor.visibleOnFrame = false;
SurfaceColor.target = 1;
SurfaceColor.value = new BABYLON.Color3(1, 0.5098039215686274, 0);
SurfaceColor.isConstant = false;

// FragmentOutputBlock
var FragmentOutput = new BABYLON.FragmentOutputBlock("FragmentOutput");
FragmentOutput.visibleInInspector = false;
FragmentOutput.visibleOnFrame = false;
FragmentOutput.target = 2;
FragmentOutput.convertToGammaSpace = false;
FragmentOutput.convertToLinearSpace = false;
FragmentOutput.useLogarithmicDepth = false;

// TransformBlock
var WorldPosViewProjectionTransform = new BABYLON.TransformBlock("WorldPos * ViewProjectionTransform");
WorldPosViewProjectionTransform.visibleInInspector = false;
WorldPosViewProjectionTransform.visibleOnFrame = false;
WorldPosViewProjectionTransform.target = 1;
WorldPosViewProjectionTransform.complementZ = 0;
WorldPosViewProjectionTransform.complementW = 1;

// InputBlock
var ViewProjection = new BABYLON.InputBlock("ViewProjection");
ViewProjection.visibleInInspector = false;
ViewProjection.visibleOnFrame = false;
ViewProjection.target = 1;
ViewProjection.setAsSystemValue(BABYLON.NodeMaterialSystemValues.ViewProjection);

// VertexOutputBlock
var VertexOutput = new BABYLON.VertexOutputBlock("VertexOutput");
VertexOutput.visibleInInspector = false;
VertexOutput.visibleOnFrame = false;
VertexOutput.target = 1;

// Connections
position.output.connectTo(WorldPos.vector);
World.output.connectTo(WorldPos.transform);
WorldPos.output.connectTo(WorldPosViewProjectionTransform.vector);
ViewProjection.output.connectTo(WorldPosViewProjectionTransform.transform);
WorldPosViewProjectionTransform.output.connectTo(VertexOutput.vector);
SpecularColor.output.connectTo(SpecularLightingCalculation.input);
normal.output.connectTo(WorldnormalN.vector);
World.output.connectTo(WorldnormalN.transform);
WorldnormalN.output.connectTo(N.xyzw);
N.xyzOut.connectTo(NNormalized.input);
NNormalized.output.connectTo(NDotL.left);
WorldPos.output.connectTo(LightinformationL.worldPosition);
LightinformationL.direction.connectTo(LNormalized.input);
LNormalized.output.connectTo(NDotL.right);
NDotL.output.connectTo(QuantizedDiffuseLightingIntensity.value);
Diffusecutoff.output.connectTo(QuantizedDiffuseLightingIntensity.edge);
QuantizedDiffuseLightingIntensity.output.connectTo(SpecularFactor.left);
NNormalized.output.connectTo(NDotH.left);
LNormalized.output.connectTo(H.left);
WorldPos.output.connectTo(Viewdirection.worldPosition);
cameraPosition.output.connectTo(Viewdirection.cameraPosition);
Viewdirection.output.connectTo(VNormalized.input);
VNormalized.output.connectTo(H.right);
H.output.connectTo(HNormalized.input);
HNormalized.output.connectTo(NDotH.right);
NDotH.output.connectTo(SpecularFactor.right);
SpecularFactor.output.connectTo(SpecularIntensity.value);
Glossiness1.output.connectTo(Glossiness.left);
Glossiness1.output.connectTo(Glossiness.right);
Glossiness.output.connectTo(SpecularIntensity.power);
SpecularIntensity.output.connectTo(QuantizedSpecularIntensity.value);
SpecularCutoff.output.connectTo(QuantizedSpecularIntensity.edge);
QuantizedSpecularIntensity.output.connectTo(SpecularLightingCalculation.factor);
SpecularLightingCalculation.output.connectTo(AddSpecularAmbientDiffuse.left);
AmbientLight.output.connectTo(AddAmbienttoDiffusion.left);
DiffuseColor.output.connectTo(DiffuseLightingCalculation.input);
QuantizedDiffuseLightingIntensity.output.connectTo(DiffuseLightingCalculation.factor);
DiffuseLightingCalculation.output.connectTo(AddAmbienttoDiffusion.right);
AddAmbienttoDiffusion.output.connectTo(AddSpecularAmbientDiffuse.right);
AddSpecularAmbientDiffuse.output.connectTo(AddRimSpecDiffAmb.left);
RimColor.output.connectTo(Scale.input);
VNormalized.output.connectTo(NDotV.left);
NNormalized.output.connectTo(NDotV.right);
NDotV.output.connectTo(OneminusNDotV.input);
OneminusNDotV.output.connectTo(RimIntensityFactored.left);
NDotL.output.connectTo(RimFactor.value);
RimIntensity.output.connectTo(RimFactor.power);
RimFactor.output.connectTo(RimIntensityFactored.right);
RimIntensityFactored.output.connectTo(QuantizedRimLightIntensity.value);
RimCutoff.output.connectTo(QuantizedRimLightIntensity.edge);
QuantizedRimLightIntensity.output.connectTo(Scale.factor);
Scale.output.connectTo(AddRimSpecDiffAmb.right);
AddRimSpecDiffAmb.output.connectTo(LightxSurface.left);
SurfaceColor.output.connectTo(LightxSurface.right);
LightxSurface.output.connectTo(FragmentOutput.rgb);

// Output nodes
nodeMaterial.addOutputNode(VertexOutput);
nodeMaterial.addOutputNode(FragmentOutput);
nodeMaterial.build();
